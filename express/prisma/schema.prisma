// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
  moduleFormat = "esm"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model PalavraChave {
  nome String @id
  usuario PalavraUsuario[]
  discos PalavraDisco[]
  livros PalavraLivro[]
}

model Usuario {
  cod String @id @default(uuid()) 
  nome String
  tel1 String
  tel2 String?
  email String @unique
  pais String
  estado String
  cidade String
  bairro String
  rua String
  senha String
  num_casa Int
  dt_nascimento DateTime 
  livros Livro[]
  discos Disco[] 
  avaliou Avaliacao[] @relation("avaliador")
  avaliado Avaliacao[] @relation("avaliado")
  seguidores Segue[] @relation("seguido")
  seguindo Segue[] @relation("seguinte")
  palavras_chave PalavraUsuario[]
  denunciou Denuncia[] @relation("denunciante")
  denunciadopor Denuncia[] @relation("denunciado")

  desejos_disco desejos_disco[]

  desejos_livro desejos_livro[]
}

model Denuncia {
  denunciante String
  denunciado String
  descricao String
  denuncianteRef Usuario @relation("denunciante", fields: [denunciante], references: [cod])
  denunciadoRef Usuario @relation("denunciado", fields: [denunciado], references: [cod])
  @@id([denunciante, denunciado])
}

model Livro {
  id_prod String @id @default(uuid())
  nome String
  valor Int
  condicao String
  descricao String
  autor String
  edicao String
  qtd_pag Int
  id_usuario String
  vendedor Usuario @relation(fields: [id_usuario], references: [cod])
  palavras_chave PalavraLivro[]
}

model Disco {
  id_prod String @id @default(uuid())
  nome String
  valor Int
  condicao String
  descricao String
  artista String
  ano Int
  gravadora String
  id_usuario String
  vendedor Usuario @relation(fields: [id_usuario], references: [cod])
  palavras_chave PalavraDisco[]
}

model Avaliacao{
  cod_avaliador String
  cod_avaliado String
  avaliador Usuario @relation("avaliador", fields: [cod_avaliador], references: [cod])
  avaliado Usuario @relation("avaliado", fields: [cod_avaliado], references: [cod])
  nota Int
  descricao String
  @@id([cod_avaliador, cod_avaliado])
}

model Segue {
  seguinte String
  seguido String
  seguinteRef Usuario @relation("seguinte", fields: [seguinte], references: [cod])
  seguidoRef Usuario @relation("seguido", fields: [seguido], references: [cod])
  @@id([seguinte, seguido])
}

model PalavraUsuario {
  usuario String
  nome String
  usuarioRef Usuario @relation(fields: [usuario], references: [cod])
  palavraRef PalavraChave @relation(fields: [nome], references: [nome])
  @@id([usuario, nome])
}

model PalavraLivro {
  livro String
  nome String
  livroRef Livro @relation(fields: [livro], references: [id_prod])
  palavraRef PalavraChave @relation(fields: [nome], references: [nome])
  @@id([livro, nome])
}

model PalavraDisco {
  disco String
  palavra String
  discoRef Disco @relation(fields: [disco], references: [id_prod])
  palavraRef PalavraChave @relation(fields: [palavra], references: [nome])
  @@id([disco, palavra])
}

model desejos_disco {
  id_usuario String
  id_prod String
  usuario Usuario @relation(fields: [id_usuario], references: [cod])
  @@id([id_usuario, id_prod])
}

model desejos_livro {
  id_usuario String
  id_prod String
  usuario Usuario @relation(fields: [id_usuario], references: [cod])
  @@id([id_usuario, id_prod])
}